<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd">
    
  <!-- this is the aspect -->
    <bean id="profiler" class="com.dn.jta.aspect.SimpleProfiler">
        <!-- execute before the transactional advice (hence the lower order number) -->
        <property name="order" value="1"/>
    </bean>

    <aop:config>
            <!-- this advice will execute around the transactional advice -->
            <aop:aspect id="profilingAspect" ref="profiler">
                <aop:pointcut id="serviceMethodWithReturnValue"
                        expression="execution(* com..service.*.*(..))"/>
                <aop:around method="profile" pointcut-ref="serviceMethodWithReturnValue"/>
            </aop:aspect>
    </aop:config>
    
    
    <!-- 第一个数据库 -->
	<bean id="db1DataSource" class="org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
		init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="mysql/db01" />
		<property name="xaDataSourceClassName"
			value="com.alibaba.druid.pool.xa.DruidXADataSource" />
		<property name="xaProperties">
			<props>
				<prop key="url">${spring.datasource.db1.url}</prop>
				<prop key="username">${spring.datasource.db1.username}</prop>
				<prop key="password">${spring.datasource.db1.password}</prop>
			</props>
		</property>
	</bean>
	<!-- 第二个数据库 -->
	<bean id="db2DataSource" class="org.springframework.boot.jta.atomikos.AtomikosDataSourceBean"
		init-method="init" destroy-method="close">
		<property name="uniqueResourceName" value="mysql/db02" />
		<property name="xaDataSourceClassName"
			value="com.alibaba.druid.pool.xa.DruidXADataSource" />
		<property name="xaProperties">
			<props>
				<prop key="url">${spring.datasource.db2.url}</prop>
				<prop key="username">${spring.datasource.db2.username}</prop>
				<prop key="password">${spring.datasource.db2.password}</prop>
			</props>
		</property>
	</bean>
  
  	<!-- mybatis sqlSessionFactory 配置  -->
<!--   	
  	<bean id="sqlSessionFactoryA" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config-db1.xml" />
		<property name="dataSource" ref="db1DataSource" />
	</bean>

	<bean id="sqlSessionFactoryB" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis-config-db2.xml" />
		<property name="dataSource" ref="db2DataSource" />
	</bean>
	 -->
	
	<!-- atomikos提供的TM实现  -->
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<property name="forceShutdown">
			<value>true</value>
		</property>
	</bean>

	<!-- atomikos 提供的 UserTransaction实现 -->
	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout" value="300" />
	</bean>

	<!-- spring中使用的事务管理器 JtaTransactionManager,来集成 atomikos 提供的jta-TM实现 -->
	<bean id="springTransactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager">
			<ref bean="atomikosTransactionManager" />
		</property>
		<property name="userTransaction">
			<ref bean="atomikosUserTransaction" />
		</property>
	</bean>

	<aop:aspectj-autoproxy />
	
	
    <tx:annotation-driven transaction-manager="springTransactionManager" order="200"/>
<!-- 
	<tx:advice id="txAdvice" transaction-manager="springTransactionManager">
	  <tx:attributes>
	    <tx:method name="query*" propagation="SUPPORTS" read-only="true" ></tx:method>
	    <tx:method name="get*" propagation="SUPPORTS" read-only="true" ></tx:method>
	    <tx:method name="select*" propagation="SUPPORTS" read-only="true" ></tx:method>
	    <tx:method name="*" propagation="REQUIRED" rollback-for="Exception" ></tx:method>
	  </tx:attributes>
	</tx:advice>
	 <aop:config>
	  <aop:pointcut id="txMethod" expression="execution (* com..service.*.*(..))" />
	  <aop:advisor advice-ref="txAdvice" pointcut-ref="txMethod" order="2" />
	</aop:config>
   -->
</beans>